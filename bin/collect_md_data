#!/usr/bin/env python
import os
import sys
import numpy as np
import pandas as pd
import glob as glob
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import PandasTools
import timber

##############################################################################
### Callum Dickson, GDC CADD (callum.dickson@novartis.com)
##############################################################################

def get_pbsa(file_in):
    if timber.check_file(file_in):
        try:
            with open(file_in,'r') as f:
                data=f.readlines()

            ctr=0
            for line in data:
                if 'DELTA TOTAL' in line:
                    dg=str(line.split()[2])
                    if ctr==0:
                        gbsa=float(dg)
                    elif ctr==1:
                        pbsa=float(dg)
                    ctr+=1
        except:
            gbsa=None
            pbsa=None
    else:
        gbsa=None
        pbsa=None

    return gbsa,pbsa

def local_properties(hbond_dict,filename='output_MDanalysis.csv'):

    df=pd.DataFrame()
    rmsd=[]
    pbsa=[]
    gbsa=[]
    for r in glob.glob('run_*/'):

        if timber.check_file(r+'lig_rmsd.csv'):
            rmsd.append(list(pd.read_csv(r+'lig_rmsd.csv')['lig_rmsd']))
        g,p=get_pbsa(r+'FINAL_RESULTS_MMPBSA.dat')
        if g:
            gbsa.append(g)
        if p:
            pbsa.append(p)

    df.at[0,'RMSD']=np.average(rmsd)
    df.at[0,'std_RMSD']=np.std(rmsd)

    if len(gbsa)>0:
        df.at[0,'MM-GBSA']=np.average(gbsa)
        df.at[0,'std_MM-GBSA']=np.std(gbsa)
    else:
        df.at[0,'MM-GBSA']=None
        df.at[0,'std_MM-GBSA']=None

    if len(pbsa)>0:
        df.at[0,'MM-PBSA']=np.average(pbsa)
        df.at[0,'std_MM-PBSA']=np.std(pbsa)
    else:
        df.at[0,'MM-PBSA']=None
        df.at[0,'std_MM-PBSA']=None

    if hbond_dict:
        if len(hbond_dict)>0:
            for k,v in hbond_dict.items():
                df.at[0,k]=np.average(v)
                df.at[0,'std_'+k]=np.std(v)

    if len(df)>0:
        df.to_csv(filename,index=False)

def get_min_rmsd(file_str):

    rmsd=[]
    f_list=[]
    for f in sorted(glob.glob(file_str)):
        if timber.check_file(f.replace('lig_rmsd.csv','represent.pdb')):
            rmsd.append(np.average(list(pd.read_csv(f)['lig_rmsd'])))
            f_list.append(f)

    idx_out=int(f_list[np.argmin(rmsd)].split('run_')[1].split('/')[0])

    print(rmsd,f_list,idx_out)

    return idx_out

##############################################################################
## MAIN ##
##############################################################################

def run(): 

    dir_list=[]
    if len(glob.glob('arrayfiles*/mdbaselist.dat'))>0:
        for af in glob.glob('arrayfiles*/mdbaselist.dat'):
            with open(af,'r') as f:
                for line in f:
                    name=line.strip().strip('/')
                    if timber.check_file(name+'/UNL.sdf') and timber.check_file(name+'/run_1/image.nc'):
                        dir_list.append(name)

    if len(dir_list)==0:
        dir_list.append('./')

    cwd=os.getcwd()
    for name in dir_list:
        os.chdir(name)
        print(name)

        m=Chem.SDMolSupplier('UNL.sdf',removeHs=False)[0]

        print('\nGenerating figures\n')

        # fluctuation plots
        timber.csv_to_png(sorted(glob.glob('run_*/rmsf.csv')),title='RMSF_figure')
        timber.csv_to_png(sorted(glob.glob('run_*/sasa.csv')),title='SASA_figure')
        timber.csv_to_png(sorted(glob.glob('run_*/lig_rmsd.csv')),title='Ligand_RMSD_figure')
        timber.csv_to_png(sorted(glob.glob('run_*/prot_rmsd.csv')),title='Protein_RMSD_figure')

        # SASA
        timber.sasa_figure(m,'run_*/sasa.csv',filename='sasa_mol.png')

        # torsions
        timber.torsion_figures(m,'run_*/torsion_*csv',hist_filename='torsion_hist.png',highlight_filename='torsion_mol.png')

        # hbonds
        hbond_dict=timber.hbond_figure(file_str='run_*/prolif_all.csv',filename='hbond.png')

        # dssp
        timber.dssp_plot('run_*/',png_filename='dssp.png')

        print('Writing data to output_MDanalysis.csv\n')

        # local CSV
        local_properties(hbond_dict,'output_MDanalysis.csv')

        os.chdir(cwd)

    # final CSV and SDF for multi-ligand
    if len(dir_list)>1:
        frames=[]
        for name in dir_list:
            if timber.check_file(name+'/output_MDanalysis.csv'):
                local_df=pd.read_csv(name+'/output_MDanalysis.csv')
                local_df['Name']=name
                local_df['ROMol']=None
                m=Chem.SDMolSupplier(name+'/UNL.sdf',removeHs=False)[0] 
                min_rmsd=get_min_rmsd(name+'/run_*/lig_rmsd.csv')
                m=timber.update_mol_coords_pdb(m,name+'/run_'+str(min_rmsd)+'/represent.pdb',residue_name='UNL')
                local_df.at[0,'ROMol']=m
                frames.append(local_df)

        final_df=pd.concat(frames)
        final_df=final_df.sort_values(by=['MM-PBSA'],ascending=[True])

        print('Writing per-compound data: compounds_amberMD_PBSA.sdf\n')
        final_df.drop(columns=['ROMol']).to_csv('compounds_amberMD_PBSA.csv',index=False)
        PandasTools.WriteSDF(final_df,'compounds_amberMD_PBSA.sdf',idName='Name',molColName='ROMol',properties=list(final_df.columns))

    # cleanup
    for f in ['local_cmdline_leap.py','mdanalysis.sh','mdrun.sh','mdsetup.sh','mdfinal.sh']:
        if timber.check_file(f):
            if os.path.isdir('arrayfiles0'):
                os.system('mv %s ./arrayfiles0' % (f))

    # move the cluster files
    if os.path.isdir('arrayfiles0'):
        os.system('mv AmberMD.o* ./arrayfiles0')
        os.system('mv setup.o* ./arrayfiles0')
        os.system('mv analysis.o* ./arrayfiles0')
        os.system('mv final_data.o* ./arrayfiles0')

def main():
    run()

# MAIN
if __name__ == '__main__':
    main()

